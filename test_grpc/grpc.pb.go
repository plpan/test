// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	URequest
	UResponse
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type URequest struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *URequest) Reset()                    { *m = URequest{} }
func (m *URequest) String() string            { return proto.CompactTextString(m) }
func (*URequest) ProtoMessage()               {}
func (*URequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *URequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type UResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  uint32 `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Sex  uint32 `protobuf:"varint,3,opt,name=sex" json:"sex,omitempty"`
}

func (m *UResponse) Reset()                    { *m = UResponse{} }
func (m *UResponse) String() string            { return proto.CompactTextString(m) }
func (*UResponse) ProtoMessage()               {}
func (*UResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UResponse) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UResponse) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func init() {
	proto.RegisterType((*URequest)(nil), "grpc.URequest")
	proto.RegisterType((*UResponse)(nil), "grpc.UResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Data service

type DataClient interface {
	GetUserInfo(ctx context.Context, in *URequest, opts ...grpc1.CallOption) (*UResponse, error)
	ChangeUserInfo(ctx context.Context, opts ...grpc1.CallOption) (Data_ChangeUserInfoClient, error)
}

type dataClient struct {
	cc *grpc1.ClientConn
}

func NewDataClient(cc *grpc1.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetUserInfo(ctx context.Context, in *URequest, opts ...grpc1.CallOption) (*UResponse, error) {
	out := new(UResponse)
	err := grpc1.Invoke(ctx, "/grpc.Data/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ChangeUserInfo(ctx context.Context, opts ...grpc1.CallOption) (Data_ChangeUserInfoClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Data_serviceDesc.Streams[0], c.cc, "/grpc.Data/ChangeUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataChangeUserInfoClient{stream}
	return x, nil
}

type Data_ChangeUserInfoClient interface {
	Send(*UResponse) error
	Recv() (*UResponse, error)
	grpc1.ClientStream
}

type dataChangeUserInfoClient struct {
	grpc1.ClientStream
}

func (x *dataChangeUserInfoClient) Send(m *UResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataChangeUserInfoClient) Recv() (*UResponse, error) {
	m := new(UResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Data service

type DataServer interface {
	GetUserInfo(context.Context, *URequest) (*UResponse, error)
	ChangeUserInfo(Data_ChangeUserInfoServer) error
}

func RegisterDataServer(s *grpc1.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(URequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetUserInfo(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Data/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetUserInfo(ctx, req.(*URequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ChangeUserInfo_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(DataServer).ChangeUserInfo(&dataChangeUserInfoServer{stream})
}

type Data_ChangeUserInfoServer interface {
	Send(*UResponse) error
	Recv() (*UResponse, error)
	grpc1.ServerStream
}

type dataChangeUserInfoServer struct {
	grpc1.ServerStream
}

func (x *dataChangeUserInfoServer) Send(m *UResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataChangeUserInfoServer) Recv() (*UResponse, error) {
	m := new(UResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Data_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _Data_GetUserInfo_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "ChangeUserInfo",
			Handler:       _Data_ChangeUserInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x64, 0xb8, 0x38, 0x42, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x4b, 0x33, 0x53, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x58, 0x82, 0x40, 0x4c, 0x25, 0x67, 0x2e, 0x4e, 0xa0, 0x6c, 0x71, 0x41, 0x7e, 0x5e,
	0x71, 0xaa, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0x2a, 0x58, 0x9e, 0x33, 0x08, 0xcc, 0x06,
	0x69, 0x49, 0x4c, 0x4f, 0x95, 0x60, 0x02, 0x0a, 0xf1, 0x06, 0x81, 0x98, 0x20, 0x91, 0xe2, 0xd4,
	0x0a, 0x09, 0x66, 0x88, 0x08, 0x90, 0x69, 0x54, 0xc4, 0xc5, 0xe2, 0x92, 0x58, 0x92, 0x28, 0x64,
	0xc0, 0xc5, 0xed, 0x9e, 0x5a, 0x12, 0x5a, 0x9c, 0x5a, 0xe4, 0x99, 0x97, 0x96, 0x2f, 0xc4, 0xa7,
	0x07, 0x76, 0x0c, 0xcc, 0x76, 0x29, 0x7e, 0x38, 0x1f, 0x62, 0x9f, 0x12, 0x83, 0x90, 0x05, 0x17,
	0x9f, 0x73, 0x46, 0x62, 0x5e, 0x7a, 0x2a, 0x5c, 0x13, 0xba, 0x22, 0x2c, 0xba, 0x34, 0x18, 0x0d,
	0x18, 0x93, 0xd8, 0xc0, 0x7e, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x31, 0x73, 0xe0, 0x29,
	0xf1, 0x00, 0x00, 0x00,
}
